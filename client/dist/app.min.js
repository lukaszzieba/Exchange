!function(){"use strict";angular.module("exchangeApp",["ui.router","ngWebSocket","angular-storage","angular-jwt","ngAnimate","toastr","ngLodash","account.module"])}(),function(){"use strict";function config($locationProvider,$stateProvider,$urlRouterProvider,jwtInterceptorProvider,$httpProvider){$urlRouterProvider.otherwise("/home"),$stateProvider.state("home",{url:"/home",template:"<home></home>"}).state("currency",{url:"/currency",template:"<currency></currency>"}).state("register",{url:"/register",template:"<register></register>",data:{notAllowLogedInUsers:!0}}).state("exchange",{url:"/exchange",template:"<exchange></exchange>",data:{requireLogin:!0}}).state("profile",{url:"/profile",template:"<profile></profile>",data:{requireLogin:!0}}).state("profile.main",{url:"/main",template:"<main></main>",data:{requireLogin:!0}}).state("profile.user",{url:"/user",template:"<user></user>",data:{requireLogin:!0}}).state("profile.wallet",{url:"/wallet",template:"<define-wallet></define-wallet>",data:{requireLogin:!0}}),jwtInterceptorProvider.tokenGetter=function(store){return store.get("jwt")},$httpProvider.interceptors.push("jwtInterceptor")}function run($rootScope,$state,store){$rootScope.$on("$stateChangeStart",function(e,to){var jwt=store.get("jwt");to.data&&to.data.requireLogin&&(jwt||(e.preventDefault(),$state.go("home"))),to.data&&to.data.notAllowLogedInUsers&&jwt&&(e.preventDefault(),$state.go("exchange"))}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){$rootScope.currentState=toState.name})}angular.module("exchangeApp").config(config).run(run),config.$inject=["$locationProvider","$stateProvider","$urlRouterProvider","jwtInterceptorProvider","$httpProvider"],run.$inject=["$rootScope","$state","store"]}(),function(){"use strict";angular.module("account.module",["ui.router","angular-storage","angular-jwt","toastr"])}(),function(){"use strict";angular.module("exchangeApp",["ui.router","ngWebSocket","angular-storage","angular-jwt","ngAnimate","toastr","ngLodash","account.module"])}(),function(){"use strict";function config($locationProvider,$stateProvider,$urlRouterProvider,jwtInterceptorProvider,$httpProvider){$urlRouterProvider.otherwise("/home"),$stateProvider.state("home",{url:"/home",template:"<home></home>"}).state("currency",{url:"/currency",template:"<currency></currency>"}).state("register",{url:"/register",template:"<register></register>",data:{notAllowLogedInUsers:!0}}).state("exchange",{url:"/exchange",template:"<exchange></exchange>",data:{requireLogin:!0}}).state("profile",{url:"/profile",template:"<profile></profile>",data:{requireLogin:!0}}).state("profile.main",{url:"/main",template:"<main></main>",data:{requireLogin:!0}}).state("profile.user",{url:"/user",template:"<user></user>",data:{requireLogin:!0}}).state("profile.wallet",{url:"/wallet",template:"<define-wallet></define-wallet>",data:{requireLogin:!0}}),jwtInterceptorProvider.tokenGetter=function(store){return store.get("jwt")},$httpProvider.interceptors.push("jwtInterceptor")}function run($rootScope,$state,store){$rootScope.$on("$stateChangeStart",function(e,to){var jwt=store.get("jwt");to.data&&to.data.requireLogin&&(jwt||(e.preventDefault(),$state.go("home"))),to.data&&to.data.notAllowLogedInUsers&&jwt&&(e.preventDefault(),$state.go("exchange"))}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams){$rootScope.currentState=toState.name})}angular.module("exchangeApp").config(config).run(run),config.$inject=["$locationProvider","$stateProvider","$urlRouterProvider","jwtInterceptorProvider","$httpProvider"],run.$inject=["$rootScope","$state","store"]}(),function(){"use strict";function IdentyService(store,jwtHelper){function getDecodedToken(){var token=store.get("jwt"),tokenPayload={};return token&&(tokenPayload=jwtHelper.decodeToken(token)),tokenPayload}function isAuthenticated(){return void 0!==this.currentUser&&this.currentUser.hasOwnProperty("email")?currentUser:!1}var currentUser=getDecodedToken();return{currentUser:currentUser,getDecodedToken:getDecodedToken,isAuthenticated:isAuthenticated}}angular.module("account.module").factory("IdentyService",IdentyService),IdentyService.$inject=["store","jwtHelper"]}(),function(){"use strict";angular.module("account.module").component("accountNav",{templateUrl:"./app/account/login/login.html",controller:"LoginController"})}(),function(){"use strict";function LoginController($scope,LoginService,store,$state,IdentyService){var vm=this;vm.userData={},vm.identy=IdentyService,vm.login=function(userData){$scope.login_form.submitted=!1,$scope.login_form.$valid?LoginService.login(userData).then(function(response){if(response.data&&response.data.success){store.set("jwt",response.data.id_token);var t=IdentyService.getDecodedToken();IdentyService.currentUser=t,$state.go("exchange"),vm.userData={}}},function(err){console.log(err)}):$scope.login_form.submitted=!0},vm.logOut=function(){LoginService.signOut(),IdentyService.currentUser=void 0,$state.go("home")}}angular.module("exchangeApp").controller("LoginController",LoginController),LoginController.$inject=["$scope","LoginService","store","$state","IdentyService"]}(),function(){"use strict";function LoginService($http,store,IdentyService,ToastrService){function login(user){function loginSuccess(respone){return ToastrService.showToastr(!0,respone.data.msg),respone}function loginFail(err){return ToastrService.showToastr(!1,err.data.msg),err}return $http({url:"/login",method:"POST",data:user}).then(loginSuccess,loginFail)}function signOut(){ToastrService.showToastr(!0,"User loged out."),store.remove("jwt")}return{login:login,signOut:signOut}}angular.module("account.module").factory("LoginService",LoginService),LoginService.$inject=["$http","store","IdentyService","ToastrService"]}(),function(){"use strict";angular.module("account.module").component("defineWallet",{templateUrl:"./app/account/profile/defineWallet/defineWallet.html",controller:"DefineWalletController"})}(),function(){"use strict";function DefineWalletController(DefineWalletService,$scope){function activate(){return getProfile().then(function(){console.log("Activate proflie")})}function getProfile(){return DefineWalletService.getFullProfile().then(function(data){return vm.profile=data,vm.profile})}var vm=this;vm.profile,activate(),vm.saveWallet=function(){$scope.define_wallet.submitted=!1,$scope.define_wallet.$valid&&DefineWalletService.saveWallet(vm.profile.wallet).then(function(data){console.log(data)})}}angular.module("exchangeApp").controller("DefineWalletController",DefineWalletController),DefineWalletController.$inject=["DefineWalletService","$scope"]}(),function(){"use strict";function DefineWalletService($http){function getFullProfile(){function getProflileSuccess(response){return response.data}function getProflileFail(){console.log("XHR Failed for getFullProfile.")}return $http.get("/api/protected/user").then(getProflileSuccess,getProflileFail)}function saveWallet(wallet){function updateWalletSuccess(response){return response.data}function updateWalletFail(){console.log("XHR Failed for getFullProfile.")}return $http.put("/api/protected/wallet",wallet).then(updateWalletSuccess,updateWalletFail)}return{getFullProfile:getFullProfile,saveWallet:saveWallet}}angular.module("account.module").factory("DefineWalletService",DefineWalletService),DefineWalletService.$inject=["$http"]}(),function(){"use strict";angular.module("account.module").component("main",{templateUrl:"./app/account/profile/main/main.html"})}(),function(){"use strict";angular.module("account.module").component("profile",{templateUrl:"./app/account/profile/profile.html",controller:"ProflieController"})}(),function(){"use strict";function ProflieController($rootScope){var vm=this;vm.isActive=function(state){return state===$rootScope.currentState}}angular.module("account.module").controller("ProflieController",ProflieController),ProflieController.$inject=["$rootScope"]}(),function(){"use strict";angular.module("account.module").component("user",{templateUrl:"./app/account/profile/user/user.html",controller:"UserCpntroller"})}(),function(){"use strict";function UserCpntroller($scope,UserService){function activate(){return getUser().then(function(){console.log("Update user active")})}function getUser(){return UserService.getUser().then(function(data){return $scope.updateUser=data,$scope.updateUser})}$scope.updateUser={},$scope.signupForm=function(user){$scope.update_form.submitted=!1,$scope.update_form.$valid?UserService.updateUser(user).then(function(){$scope.updateUser=user}):$scope.update_form.submitted=!0},activate()}angular.module("account.module").controller("UserCpntroller",UserCpntroller),UserCpntroller.$inject=["$scope","UserService"]}(),function(){"use strict";function UserService($http){function getUser(){function getUserSuccuess(responese){return responese.data}function getUserFali(){console.log("XHR Failed for getUser.")}return $http.get("/api/protected/user").then(getUserSuccuess,getUserFali)}function updateUser(user){function updateUserSuccuess(responese){return responese.data}function updateUserFali(){console.log("XHR Failed for updateUser.")}return $http.put("/api/protected/user",user).then(updateUserSuccuess,updateUserFali)}return{getUser:getUser,updateUser:updateUser}}angular.module("account.module").factory("UserService",UserService),UserService.$inject=["$http"]}(),function(){"use strict";angular.module("account.module").component("register",{templateUrl:"./app/account/register/register.html",controller:"RegisterController"})}(),function(){"use strict";function RegisterController($scope,RegisterService,store,IdentyService,$state){$scope.signupForm=function(newUser){$scope.signup_form.submitted=!1,$scope.signup_form.$valid?RegisterService.registerUser(newUser).then(function(response){if(response.data&&response.data.success){store.set("jwt",response.data.id_token);var t=IdentyService.getDecodedToken();IdentyService.currentUser=t,$state.go("exchange")}},function(err){console.log(err)}):$scope.signup_form.submitted=!0}}angular.module("account.module").controller("RegisterController",RegisterController),RegisterController.$inject=["$scope","RegisterService","store","IdentyService","$state"]}(),function(){"use strict";function RegisterService($http,ToastrService){function registerUser(user){function registerSuccess(respone){return ToastrService.showToastr(!0,respone.data.msg),respone}function registerFail(err){return ToastrService.showToastr(!1,err.data.msg),err}return $http({url:"/register",method:"POST",data:user}).then(registerSuccess,registerFail)}return{registerUser:registerUser}}angular.module("account.module").factory("RegisterService",RegisterService),RegisterService.$inject=["$http","ToastrService"]}(),function(){"use strict";function BuyService($http,ToastrService){function buy(buyData){function buySuccess(responese){return console.log(responese),ToastrService.showToastr(!0,responese.data.msg),responese.data}function buyFail(err){return ToastrService.showToastr(!1,err.data.msg),err}return $http.put("/api/protected/buy",buyData).then(buySuccess,buyFail)}return{buy:buy}}angular.module("exchangeApp").factory("BuyService",BuyService),BuyService.$inject=["$http","ToastrService"]}(),function(){"use strict";angular.module("exchangeApp").component("currency",{bindingd:{},templateUrl:"./app/currency/currency.html",controller:"CurrencyController"})}(),function(){"use strict";function CurrencyController(CurrencyService,WalletService,BuyService,$scope,$rootScope,IdentyService,ToastrService,$http,$filter){function clearBuyData(){vm.cur={},$scope.ammount=0,$scope.toPay=0}var vm=this;vm.currencies=[],vm.currencies=CurrencyService,vm.userWallet=WalletService,vm.showAction=function(){return IdentyService.isAuthenticated()&&"exchange"===$rootScope.currentState},vm.cur={},$scope.ammount=0,$scope.toPay=0;vm.buy=function(currency){vm.cur=currency,$("#buyDialog").modal("show")},$scope.$watch("ammount",function(){$scope.toPay=$scope.ammount/vm.cur.Unit*vm.cur.PurchasePrice}),vm.buySubmit=function(currency){if(0!==$scope.ammount&&0!==$scope.toPay){if(vm.userWallet.wallet[0].ammount<$scope.toPay)return $("#buyDialog").modal("hide"),$("#confirmDialog").modal("hide"),clearBuyData(),void ToastrService.showToastr(!1,"You dont have enough money");$("#buyDialog").removeClass("fade").modal("hide"),$("#confirmDialog").modal("show").addClass("fade")}},vm.buyConfirm=function(){var buyData={code:vm.cur.Code,ammount:$scope.ammount,toPay:$scope.toPay};clearBuyData(),BuyService.buy(buyData).then(function(data){data.success&&(WalletService.wallet=data.wallet)},function(err){console.log("Buy fail")}),$("#confirmDialog").modal("hide")},vm.cancelBuy=function(){$("#buyDialog").modal("hide"),$("#confirmDialog").modal("hide"),clearBuyData()}}angular.module("exchangeApp").controller("CurrencyController",CurrencyController),CurrencyController.$inject=["CurrencyService","WalletService","BuyService","$scope","$rootScope","IdentyService","ToastrService","$http","$filter"]}(),function(){"use strict";function CurrencyService($http,$websocket,lodash){function getCurrencies(){dataStream.send(JSON.stringify({action:"get"}))}var dataStream=$websocket("ws://webtask.future-processing.com:8068/ws/currencies"),collection=[],forGraph=[];return dataStream.onOpen(function(){console.log("Connected to ws")}),dataStream.onMessage(function(message){0!==collection.length&&collection.splice(0,1),collection.push(JSON.parse(message.data))}),{collection:collection,forGraph:forGraph,getCurrencies:getCurrencies}}angular.module("exchangeApp").factory("CurrencyService",CurrencyService),CurrencyService.$inject=["$http","$websocket","lodash"]}(),function(){"use strict";angular.module("exchangeApp").component("exchange",{templateUrl:"./app/exchange/exchange.html",controller:"ExchangeController"})}(),function(){"use strict";function ExchangeController(){}angular.module("exchangeApp").controller("ExchangeController",ExchangeController)}(),function(){"use strict";angular.module("exchangeApp").component("home",{templateUrl:"./app/home/home.html"})}(),function(){"use strict";angular.module("exchangeApp").component("foot",{templateUrl:"./app/shell/foot/foot.html"})}(),function(){"use strict";angular.module("exchangeApp").component("navBar",{templateUrl:"./app/shell/nav/nav.html",controller:"NavController"})}(),function(){"use strict";function NavController($rootScope,$scope,IdentyService){var vm=this;vm.isActive=function(state){return state===$rootScope.currentState},vm.identy=IdentyService}angular.module("exchangeApp").controller("NavController",NavController),NavController.$inject=["$rootScope","$scope","IdentyService"]}(),function(){"use strict";angular.module("exchangeApp").component("shell",{templateUrl:"./app/shell/shell.html"})}(),function(){"use strict";function ToastrService(toastr){function showToastr(success,msg){success?toastr.success(msg,"Success"):toastr.error(msg,"Error")}return{showToastr:showToastr}}angular.module("exchangeApp").factory("ToastrService",ToastrService),ToastrService.$inject=["toastr"]}(),function(){"use strict";function SellService($http,ToastrService){function sell(sellData){function sellSuccess(responese){return ToastrService.showToastr(!0,responese.data.msg),responese.data}function sellFail(err){return ToastrService.showToastr(!1,err.data.msg),err}return $http.put("/api/protected/sell",sellData).then(sellSuccess,sellFail)}return{sell:sell}}angular.module("exchangeApp").factory("SellService",SellService),SellService.$inject=["$http","ToastrService"]}(),function(){"use strict";angular.module("exchangeApp").component("wallet",{templateUrl:"./app/wallet/wallet.html",controller:"WalletController"})}(),function(){"use strict";function WalletController(WalletService,CurrencyService,SellService,ToastrService,$scope){function activate(){return getWallet().then(function(){console.log("Activate wallet")})}function getWallet(){return WalletService.getWallet().then(function(data){return data.success?(vm.userWallet=data.wallet,vm.wallet):void 0})}function getAmmount(){var money;return vm.userWallet.wallet.forEach(function(item){item.code===vm.cur.code&&(console.log(item),money=item.ammount)}),money}function clearSellData(){vm.cur={},$scope.youHave=0,$scope.ammount=0,$scope.toGet=0}var vm=this;vm.userWallet=WalletService,vm.currencies=CurrencyService.collection,activate(),vm.getUintPrice=function(cur){var price=0;return 0!==vm.currencies.length&&void 0!==vm.currencies[0].Items&&vm.currencies[0].Items.forEach(function(item){item.Code===cur.code&&(price=item.SellPrice)}),price},vm.getValue=function(cur){var unitPrice=vm.getUintPrice(cur);return cur.ammount/cur.unit*unitPrice},vm.cur={},$scope.youHave=0,$scope.ammount=0,$scope.toGet=0,vm.sell=function(currency){$scope.youHave=currency.ammount,vm.cur=currency,$("#sellDialog").modal("show")},vm.sellSubmit=function(){getAmmount();return void 0===$scope.ammount?void ToastrService.showToastr(!1,"You dont have enough money"):void(0!==$scope.ammount&&($("#sellDialog").removeClass("fade").modal("hide"),$("#sellConfirmDialog").modal("show").addClass("fade")))},$scope.$watch("ammount",function(newVal){$scope.toGet=$scope.ammount/vm.cur.unit*vm.getUintPrice(vm.cur),$scope.youHave=vm.cur.ammount-newVal,isNaN($scope.youHave)&&($scope.youHave="You don't have enough ")}),vm.sellConfirm=function(currency){var sellData={code:vm.cur.code,sellUnits:$scope.ammount,toGet:$scope.toGet};clearSellData(),SellService.sell(sellData).then(function(data){data.success&&(WalletService.wallet=data.wallet)},function(){console.log("Error")}),$("#sellConfirmDialog").modal("hide")},vm.cancelSell=function(){$("#sellDialog").modal("hide"),$("#sellConfirmDialog").modal("hide"),clearSellData()},$("#sellModal").on("hide.bs.modal",function(event){clearSellData()})}angular.module("exchangeApp").controller("WalletController",WalletController),WalletController.$inject=["WalletService","CurrencyService","SellService","ToastrService","$scope"]}(),function(){"use strict";function WalletService($http,ToastrService){function getWallet(){function walletSuccess(response){return self.wallet=response.data,response.data}function walletFail(err){return ToastrService.showToastr(!1,err.data.msg),err}var self=this;return $http.get("/api/protected/wallet").then(walletSuccess,walletFail)}var wallet;return{wallet:wallet,getWallet:getWallet}}angular.module("exchangeApp").factory("WalletService",WalletService),WalletService.$inject=["$http","ToastrService"]}();